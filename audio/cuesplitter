#!/bin/bash

# Split audio file using cue sheet

set -eu -o pipefail

function show_tip {
  printf 'Use "-h" for help\n'
}

function check_dependencies {
  local -r dependencies=( \
    'ffmpeg' 'iconv' 'shnsplit' 'flac' 'wavpack' 'cuetag' \
  )

  for dependency in "${dependencies[@]}"; do
    if ! command -v "${dependency}" &> /dev/null; then
      printf \
        '\n%s required.\nInstall: sudo apt install %s\n\n' \
        "$dependency" "$dependency" \
        1>&2
      exit 1
    fi
  done
}

function parse_args {
  function show_help {
    cat << EOF
NAME
    $(basename "$0") - split audio file using CUE sheet

SYNOPSIS
    $(basename "$0") [ options... ] [ ./dir/containing/files' ]

    Example:
    $(basename "$0") './Orb - Live 93'

DESCRIPTION
    Splits FLAC, APE, WV or WAV using cue sheet into multiple FLAC files and copies ID3v2 metadata from cue sheet to each file

OPTIONS
    -h, --help
        Show help

    -c, --cyrillic
        Change cue sheet encoding to UTF-8. Fixes the issue with cyrillic .cue files created in Windows and opened in Linux. Use this option when the script throws shntool error

EOF
  }

  # Process script options

  while getopts ':-:hc' opt; do
    case "$opt" in
      c ) is_cue_cyrillic_lang=1 ;;
      h ) show_help ; exit 0 ;;
      # Support long options ###################################################
      - )
          case "$OPTARG" in
            cyrillic ) is_cue_cyrillic_lang=1 ;;
            help     ) show_help ; exit 0 ;;
            * )
                       printf 'Error: Unknown long option %s\n\n' "$OPTARG" 1>&2
                       show_tip
                       exit 1
                       ;;
          esac
          ;;
      ##########################################################################
      : )
        printf 'Error: No arguments supplied\n\n' 1>&2
        show_tip
        exit 1
        ;;
      * )
        printf 'Error: Unknown option %s\n\n' "$OPTARG" >&2
        show_tip
        exit 1
        ;;
    esac
  done
  # At this point $1 = '-c'. We shift _this_function's_ params index,
  # making $1 = './file.flac'. Don't forget, we've invoked this function
  # forwardeding it the array of args passed to the scipt. So here, we shift
  # the _function's internal params index, it doesn't change the global
  # _script's_ params index, we wil do it outside the function.
  shift $(( OPTIND - 1 ))

  # Validate script args

  if (( $# > 1 )); then
    printf 'Error: Incorrect number of arguments\n\n' 1>&2
    show_tip
    exit 1
  fi

  if [[ ! -d "$1" ]]; then
    printf 'Error: Directory doesn'\''t exist\n\n' 1>&2
    show_tip
    exit 1
  fi

  # Validate cue file
  local cue_files_count
  cue_files_count="$(find "$1" -type f -regex '.*\.cue' | wc -l)"
  readonly cue_files_count
  if (( cue_files_count > 1 )); then
    printf '%u cue sheets found in the current dir. There should be only one cue sheet. Remove the extraneous cuesheets\n\n' "$cue_files_count" 1>&2
    exit 1
  fi
  if (( cue_files_count == 0 )); then
    printf 'No cue sheets found in the current dir\n\n' 1>&2
    exit 1
  fi
  if ! grep -iR --silent '\.ape\|\.flac\|\.wav\|\.wv' "$1"/*.cue ; then
    printf \
      'Error: Audio format is not supported. Only FLAC, APE, WV and WAV files allowed\n\n' 1>&2
      show_tip
    exit 1
  fi
  if ! grep --silent 'INDEX 01 00:00:00' "$1"/*.cue; then
    # TODO move all printfs to function and redirect to STDERR
    printf 'The first track has a pre-gap. Shnsplit will cut that off and put it in a separate file.\nYou don'\''t want that. Please modify the cue sheet from\n' 1>&2
    grep -m1 'INDEX 00' "$1"/*.cue
    grep -m1 'INDEX 01' "$1"/*.cue
    printf '\nto: INDEX 01 00:00:00\n'
    exit 1
  fi

  # Validate audio file
  local audio_files_count
  audio_files_count="$(find "$1" -type f -regex '.*\.\(wav\|wv\|flac\|ape\)$' | wc -l)"
  readonly cue_files_count
  if (( audio_files_count > 1 )); then
    printf '%u audio files found in the current dir. There should be only one audio file, otherwise you might loose data during script execution. Remove the extraneous audio files\n\n' "$audio_files_count" 1>&2
    exit 1
  fi
}

function split_audio {
  printf '*** Split audio file\n\n' 

  # As there is no APE codec for Linux, let's convert it to flac first
  if [[ "$AUDIO_FILE_PATH" == *.ape ]]; then
    ffmpeg \
      -hide_banner \
      -i "$AUDIO_FILE_PATH" \
      "${AUDIO_FILE_PATH%.*}.flac"

    shnsplit \
      -f "$CUE_FILE_PATH" \
      -o flac \
      -d "$ROOT_DIR" \
      -t '%n. %p - %t' \
      "${AUDIO_FILE_PATH%.*}.flac" \
    && rm "${AUDIO_FILE_PATH%.*}.flac"
  else 
    shnsplit \
      -f "$CUE_FILE_PATH" \
      -o flac \
      -d "$ROOT_DIR" \
      -t '%n. %p - %t' \
      "${AUDIO_FILE_PATH}"
  fi
}

function fix_cyrillic_cue_encoding {
  printf '*** Fix cyrillic .cue encoding: convert to UTF-8\n\n'
  # cp1251 refers to "Windows-1251, Cyrillic"
  iconv \
    --from-code=cp1251 \
    --to-code=utf-8 \
    "$CUE_FILE_PATH" \
    --output="${CUE_FILE_PATH}_cyr"
  # If iconv converted successfully (0), backup the original cue file and
  # replace old cue file with the new one
  if (( $? == 0 )); then
    mv "$CUE_FILE_PATH" "${CUE_FILE_PATH}_original"
    mv "${CUE_FILE_PATH}_cyr" "$CUE_FILE_PATH"
  fi
}

function copy_id3v2 {
  printf '\n*** Copy ID3v2 tags from cue sheet to FLAC files\n\n'
  cuetag "$CUE_FILE_PATH" "$ROOT_DIR/"[[:digit:]]*.flac
}

function clean_up {
  # Delete all splitted audio files (.flac) except the original one
  find \
    "${ROOT_DIR}" \
    \( -type f -name "[[:digit:]]*.flac" \) -and \
    \( -type f -not -name "$(basename "${AUDIO_FILE_PATH}")" \) \
    -delete
  cat ./*_original > "$CUE_FILE_PATH"
  rm ./*_original
  printf '\n'
}

function delete_source {
  read -r -n 1 -p \
    "Do you want to delete the source file $(basename "${AUDIO_FILE_PATH}")? [Yy/Nn] "
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    printf '\n'
    rm "$AUDIO_FILE_PATH"
  fi
}

################################################################################
# Init

# Set default values for vars, that are set based on provided options
is_cue_cyrillic_lang=0

############################################################################### 

clear
parse_args "${@}"
# shift script params index. Now, param $1 again refers to the first script
# argument passed *after* all options
shift $(( OPTIND - 1 ))

readonly ROOT_DIR="$1"
AUDIO_FILE_PATH="$(find "$ROOT_DIR" -type f -regex '.*\.\(wav\|wv\|flac\|ape\)$')"
readonly AUDIO_FILE_PATH
CUE_FILE_PATH="$(find "$1" -type f -regex '.*\.cue')"
readonly CUE_FILE_PATH

check_dependencies

trap clean_up INT # Call on Ctrl+C

################################################################################
# Main

if [[ "$is_cue_cyrillic_lang" == 1 ]]; then fix_cyrillic_cue_encoding; fi

split_audio
copy_id3v2
delete_source

printf '\nDone\n'